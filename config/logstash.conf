input {
  # TCP输入，用于接收应用直接发送的日志
  tcp {
    port => 5000
    codec => json_lines
    tags => ["tcp", "spring-boot"]
  }
  
  # Beats输入，用于接收Filebeat数据
  beats {
    port => 5044
    tags => ["beats", "filebeat"]
  }
  
  # 文件输入，用于读取本地日志文件
  file {
    path => "/var/log/app/*.json"
    start_position => "beginning"
    codec => json
    tags => ["file", "json"]
  }
  
  file {
    path => "/var/log/app/*.log"
    start_position => "beginning"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
    tags => ["file", "text"]
  }
  
  # HZZT 日志文件输入配置
  file {
    path => "/var/log/app/hzzt*.json"
    start_position => "beginning"
    codec => json
    tags => ["file", "json", "hzzt"]
    type => "hzzt_json_log"
  }
  
  file {
    path => "/var/log/app/hzzt*.log"
    start_position => "beginning"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
    tags => ["file", "text", "hzzt"]
    type => "hzzt_text_log"
  }
  
  # HZZT 应用特定格式日志
  file {
    path => "/var/log/hzzt/*.log"
    start_position => "beginning"
    codec => multiline {
      pattern => "^%{TIMESTAMP_ISO8601}"
      negate => true
      what => "previous"
    }
    tags => ["file", "text", "hzzt", "hzzt_app"]
    type => "hzzt_application_log"
  }
  
  file {
    path => "/var/log/hzzt/*.json"
    start_position => "beginning"
    codec => json
    tags => ["file", "json", "hzzt", "hzzt_app"]
    type => "hzzt_application_json"
  }
}

filter {
  # 添加通用字段
  mutate {
    add_field => { 
      "processed_timestamp" => "%{@timestamp}"
      "logstash_version" => "8.9.0"
    }
  }
  
  # 解析JSON格式的日志消息
  if [message] =~ /^\{.*\}$/ {
    json {
      source => "message"
      remove_field => ["message"]
    }
  }
  
  # 处理HTTP请求日志
  if [logger_name] == "HTTP_REQUEST_LOG" {
    mutate {
      add_field => { 
        "log_type" => "http_request"
        "category" => "access_log"
      }
    }
    
    # 解析请求类型
    if [type] == "REQUEST" {
      mutate {
        add_field => { 
          "event_type" => "http_request"
          "phase" => "request"
        }
      }
      
      # 提取HTTP方法统计
      if [method] {
        mutate {
          add_field => { "http_method" => "%{method}" }
        }
      }
      
      # 提取URI路径
      if [uri] {
        mutate {
          add_field => { "request_path" => "%{uri}" }
        }
      }
      
      # 解析User-Agent
      if [headers][user-agent] {
        useragent {
          source => "[headers][user-agent]"
          target => "user_agent_parsed"
        }
      }
    }
    
    # 处理响应日志
    if [type] == "RESPONSE" {
      mutate {
        add_field => { 
          "event_type" => "http_response"
          "phase" => "response"
        }
      }
      
      # 性能分析
      if [duration] {
        ruby {
          code => "
            duration = event.get('duration').to_i
            if duration < 100
              event.set('performance_category', 'fast')
            elsif duration < 500
              event.set('performance_category', 'normal')
            elsif duration < 1000
              event.set('performance_category', 'slow')
            else
              event.set('performance_category', 'very_slow')
            end
          "
        }
      }
      
      # HTTP状态码分类
      if [status] {
        ruby {
          code => "
            status = event.get('status').to_i
            if status >= 200 && status < 300
              event.set('status_category', 'success')
            elsif status >= 300 && status < 400
              event.set('status_category', 'redirect')
            elsif status >= 400 && status < 500
              event.set('status_category', 'client_error')
            else
              event.set('status_category', 'server_error')
            end
          "
        }
      }
    }
    
    # 处理错误日志
    if [type] == "ERROR" {
      mutate {
        add_field => { 
          "event_type" => "http_error"
          "phase" => "error"
          "has_error" => "true"
        }
      }
    }
  }
  
  # 处理Spring Boot应用日志
  if [app] == "demo-application" or "spring-boot" in [tags] {
    mutate {
      add_field => { 
        "application_type" => "spring-boot"
        "framework" => "spring"
      }
    }
    
    # 解析日志级别
    if [level] {
      mutate {
        uppercase => [ "level" ]
      }
    }
    
    # 添加环境信息
    if [env] {
      mutate {
        add_field => { "environment" => "%{env}" }
      }
    } else {
      mutate {
        add_field => { "environment" => "unknown" }
      }
    }
    
    # 处理异常堆栈
    if [stack_trace] and [stack_trace] != "" {
      mutate {
        add_field => { "has_exception" => "true" }
      }
    } else {
      mutate {
        add_field => { "has_exception" => "false" }
      }
    }
  }
  
  # 处理 HZZT 日志
  if "hzzt" in [tags] {
    mutate {
      add_field => { 
        "application_name" => "hzzt"
        "log_source" => "hzzt_application"
        "business_domain" => "hzzt"
      }
    }
    
    # 处理 HZZT JSON 日志
    if [type] == "hzzt_json_log" or [type] == "hzzt_application_json" {
      # 解析 HZZT 特定字段
      if [hzzt_module] {
        mutate {
          add_field => { "module_name" => "%{hzzt_module}" }
        }
      }
      
      # 处理 HZZT 业务 ID
      if [hzzt_business_id] {
        mutate {
          add_field => { "business_id" => "%{hzzt_business_id}" }
        }
      }
      
      # 处理 HZZT 用户信息
      if [hzzt_user_id] {
        mutate {
          add_field => { "hzzt_user" => "%{hzzt_user_id}" }
        }
      }
      
      # 处理 HZZT 操作类型
      if [hzzt_operation] {
        mutate {
          add_field => { "operation_type" => "%{hzzt_operation}" }
        }
      }
    }
    
    # 处理 HZZT 文本日志
    if [type] == "hzzt_text_log" or [type] == "hzzt_application_log" {
      # 解析 HZZT 日志格式
      grok {
        match => { 
          "message" => [
            "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:thread}\] %{LOGLEVEL:level} \[%{DATA:hzzt_trace_id}\] %{DATA:logger} - %{GREEDYDATA:log_message}",
            "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} \[%{DATA:hzzt_module}\] %{GREEDYDATA:log_message}",
            "%{TIMESTAMP_ISO8601:timestamp} \[%{DATA:hzzt_user_id}\] %{LOGLEVEL:level} %{GREEDYDATA:log_message}"
          ]
        }
        tag_on_failure => ["_grokparsefailure_hzzt"]
      }
      
      # 提取 HZZT 业务信息
      if [log_message] =~ /HZZT-(\w+):/ {
        grok {
          match => { "log_message" => "HZZT-%{WORD:hzzt_business_code}:" }
        }
      }
      
      # 提取 pathologyId（如果存在）
      if [log_message] =~ /pathologyId[=:](\w+)/ {
        grok {
          match => { "log_message" => "pathologyId[=:]%{WORD:pathology_id}" }
        }
      }
    }
    
    # 添加 HZZT 特定标识
    mutate {
      add_field => { "is_hzzt_log" => "true" }
    }
  }
  
  # 处理Filebeat数据
  if "beats" in [tags] {
    # 解析容器信息
    if [container] {
      mutate {
        add_field => { 
          "container_name" => "%{[container][name]}"
          "container_id" => "%{[container][id]}"
        }
      }
    }
    
    # 解析主机信息
    if [host] {
      mutate {
        add_field => { "hostname" => "%{[host][name]}" }
      }
    }
  }
  
  # 解析时间戳
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
  }
  
  # 添加地理位置信息（如果需要）
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # 性能监控字段
  if [operation] {
    mutate {
      add_field => { "business_operation" => "%{operation}" }
    }
  }
  
  # 用户追踪
  if [user_id] or [userId] {
    mutate {
      add_field => { "user_tracking" => "enabled" }
    }
  }
  
  # 清理不需要的字段
  mutate {
    remove_field => [ 
      "host", 
      "agent", 
      "ecs",
      "@version",
      "input",
      "prospector"
    ]
  }
  
  # 错误处理
  if "_grokparsefailure" in [tags] {
    mutate {
      add_field => { "parsing_error" => "grok_failure" }
    }
  }
}

output {
  # HZZT 日志专用索引
  if [is_hzzt_log] == "true" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "hzzt-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
    
    # HZZT 业务日志单独索引
    if [hzzt_business_code] {
      elasticsearch {
        hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
        user => "${ELASTICSEARCH_USERNAME:}"
        password => "${ELASTICSEARCH_PASSWORD:}"
        index => "hzzt-business-%{hzzt_business_code}-%{+YYYY.MM.dd}"
        document_type => "_doc"
      }
    }
    
    # HZZT 用户操作日志
    if [hzzt_user] {
      elasticsearch {
        hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
        user => "${ELASTICSEARCH_USERNAME:}"
        password => "${ELASTICSEARCH_PASSWORD:}"
        index => "hzzt-user-operations-%{+YYYY.MM.dd}"
        document_type => "_doc"
      }
    }
  }
  
  # HTTP请求日志专用索引
  else if [log_type] == "http_request" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "http-requests-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # 根据环境输出到不同索引
  else if [environment] == "dev" or [environment] == "development" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "dev-demo-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  } else if [environment] == "test" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "test-demo-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  } else if [environment] == "prod" or [environment] == "production" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "prod-demo-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  } else {
    # 默认输出
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "demo-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # 错误日志单独输出
  if [level] == "ERROR" or [event_type] == "http_error" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "error-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # 慢请求日志单独输出
  if [performance_category] == "slow" or [performance_category] == "very_slow" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "slow-requests-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # 开发环境输出到控制台
  if [environment] == "dev" or [environment] == "development" {
    stdout {
      codec => rubydebug {
        metadata => true
      }
    }
  }
  
  # 性能监控日志
  if [business_operation] {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "performance-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
} 