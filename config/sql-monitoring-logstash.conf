input {
  # TCP输入，用于接收应用直接发送的日志
  tcp {
    port => 5000
    codec => json_lines
    tags => ["tcp", "java-dev-app"]
  }
  
  # 文件输入，专门用于SQL监控日志
  file {
    path => "/var/log/app/sql-monitoring*.log"
    start_position => "beginning"
    codec => json
    tags => ["file", "json", "sql_monitoring"]
    type => "sql_monitoring_log"
  }
  
  # HTTP请求日志文件输入
  file {
    path => "/var/log/app/http-requests*.log"
    start_position => "beginning"
    codec => json
    tags => ["file", "json", "http_requests"]
    type => "http_request_log"
  }
  
  # 应用主日志文件输入
  file {
    path => "/var/log/app/application*.log"
    start_position => "beginning"
    codec => json
    tags => ["file", "json", "application"]
    type => "application_log"
  }
}

filter {
  # 添加通用字段
  mutate {
    add_field => { 
      "processed_timestamp" => "%{@timestamp}"
      "logstash_version" => "8.9.0"
    }
  }
  
  # 处理 java-dev-app 应用日志
  if [app_name] == "java-dev-app" {
    mutate {
      add_field => { 
        "application_type" => "spring-boot"
        "framework" => "spring"
        "project" => "java-dev-app"
      }
    }
  }
  
  # 处理SQL监控日志
  if [logger_name] == "com.gui.app.interceptor.SqlLoggingInterceptor" or [type] == "sql_monitoring_log" {
    mutate {
      add_field => { 
        "log_type" => "sql_execution"
        "category" => "performance"
        "monitoring_type" => "sql"
      }
    }
    
    # 解析SQL执行日志的JSON消息
    if [message] =~ /^\{.*"type"\s*:\s*"SQL_EXECUTION".*\}$/ {
      json {
        source => "message"
        target => "sql_execution"
        remove_field => ["message"]
      }
      
      mutate {
        add_field => { 
          "event_type" => "sql_execution"
          "sql_statement" => "%{[sql_execution][sql]}"
          "execution_time_ms" => "%{[sql_execution][executionTime]}"
          "sql_success" => "%{[sql_execution][success]}"
          "request_id" => "%{[sql_execution][requestId]}"
        }
      }
      
      # 性能分析 - SQL执行时间分类
      if [sql_execution][executionTime] {
        ruby {
          code => "
            execution_time = event.get('[sql_execution][executionTime]').to_i
            if execution_time < 10
              event.set('sql_performance_category', 'very_fast')
            elsif execution_time < 50
              event.set('sql_performance_category', 'fast')
            elsif execution_time < 100
              event.set('sql_performance_category', 'normal')
            elsif execution_time < 500
              event.set('sql_performance_category', 'slow')
            elsif execution_time < 1000
              event.set('sql_performance_category', 'very_slow')
            else
              event.set('sql_performance_category', 'extremely_slow')
            end
          "
        }
      }
      
      # SQL类型分析
      if [sql_execution][sql] {
        ruby {
          code => "
            sql = event.get('[sql_execution][sql]').to_s.upcase
            if sql.start_with?('SELECT')
              event.set('sql_operation_type', 'SELECT')
            elsif sql.start_with?('INSERT')
              event.set('sql_operation_type', 'INSERT')
            elsif sql.start_with?('UPDATE')
              event.set('sql_operation_type', 'UPDATE')
            elsif sql.start_with?('DELETE')
              event.set('sql_operation_type', 'DELETE')
            else
              event.set('sql_operation_type', 'OTHER')
            end
          "
        }
      }
    }
  }
  
  # 处理SQL汇总监控日志
  if [logger_name] == "com.gui.app.aspect.SqlMonitoringAspect" {
    mutate {
      add_field => { 
        "log_type" => "sql_summary"
        "category" => "performance"
        "monitoring_type" => "sql_summary"
      }
    }
    
    # 解析SQL汇总日志的JSON消息
    if [message] =~ /^\{.*"type"\s*:\s*"SQL_SUMMARY".*\}$/ {
      json {
        source => "message"
        target => "sql_summary"
        remove_field => ["message"]
      }
      
      mutate {
        add_field => { 
          "event_type" => "sql_summary"
          "controller_class" => "%{[sql_summary][className]}"
          "controller_method" => "%{[sql_summary][methodName]}"
          "request_id" => "%{[sql_summary][requestId]}"
          "total_request_time" => "%{[sql_summary][totalRequestTime]}"
          "sql_count" => "%{[sql_summary][sqlStatistics][totalCount]}"
          "sql_success_count" => "%{[sql_summary][sqlStatistics][successCount]}"
          "sql_failed_count" => "%{[sql_summary][sqlStatistics][failedCount]}"
          "sql_total_time" => "%{[sql_summary][sqlStatistics][totalExecutionTime]}"
          "sql_avg_time" => "%{[sql_summary][sqlStatistics][averageExecutionTime]}"
          "sql_max_time" => "%{[sql_summary][sqlStatistics][maxExecutionTime]}"
          "sql_time_percentage" => "%{[sql_summary][performance][sqlTimePercentage]}"
        }
      }
      
      # 请求性能分析
      if [sql_summary][totalRequestTime] {
        ruby {
          code => "
            total_time = event.get('[sql_summary][totalRequestTime]').to_i
            if total_time < 50
              event.set('request_performance_category', 'very_fast')
            elsif total_time < 100
              event.set('request_performance_category', 'fast')
            elsif total_time < 500
              event.set('request_performance_category', 'normal')
            elsif total_time < 1000
              event.set('request_performance_category', 'slow')
            else
              event.set('request_performance_category', 'very_slow')
            end
          "
        }
      }
      
      # SQL密集度分析
      if [sql_summary][sqlStatistics][totalCount] and [sql_summary][totalRequestTime] {
        ruby {
          code => "
            sql_count = event.get('[sql_summary][sqlStatistics][totalCount]').to_i
            total_time = event.get('[sql_summary][totalRequestTime]').to_i
            if total_time > 0
              sql_density = sql_count.to_f / (total_time / 1000.0)  # SQL per second
              event.set('sql_density', sql_density.round(2))
              
              if sql_density > 100
                event.set('sql_density_category', 'very_high')
              elsif sql_density > 50
                event.set('sql_density_category', 'high')
              elsif sql_density > 10
                event.set('sql_density_category', 'normal')
              else
                event.set('sql_density_category', 'low')
              end
            end
          "
        }
      }
    }
  }
  
  # 处理HTTP请求日志
  if [logger_name] == "HTTP_REQUEST_LOG" or [type] == "http_request_log" {
    mutate {
      add_field => { 
        "log_type" => "http_request"
        "category" => "access_log"
      }
    }
    
    # 解析HTTP请求日志的JSON消息
    if [message] =~ /^\{.*"type"\s*:\s*"(REQUEST|RESPONSE|ERROR)".*\}$/ {
      json {
        source => "message"
        target => "http_request"
        remove_field => ["message"]
      }
      
      # 处理请求类型
      if [http_request][type] == "REQUEST" {
        mutate {
          add_field => { 
            "event_type" => "http_request"
            "phase" => "request"
            "http_method" => "%{[http_request][method]}"
            "request_uri" => "%{[http_request][uri]}"
            "request_id" => "%{[http_request][requestId]}"
            "user_agent" => "%{[http_request][userAgent]}"
            "remote_addr" => "%{[http_request][remoteAddr]}"
          }
        }
      }
      
      # 处理响应类型
      if [http_request][type] == "RESPONSE" {
        mutate {
          add_field => { 
            "event_type" => "http_response"
            "phase" => "response"
            "http_status" => "%{[http_request][status]}"
            "response_time" => "%{[http_request][duration]}"
            "request_id" => "%{[http_request][requestId]}"
          }
        }
        
        # HTTP状态码分类
        if [http_request][status] {
          ruby {
            code => "
              status = event.get('[http_request][status]').to_i
              if status >= 200 && status < 300
                event.set('status_category', 'success')
              elsif status >= 300 && status < 400
                event.set('status_category', 'redirect')
              elsif status >= 400 && status < 500
                event.set('status_category', 'client_error')
              else
                event.set('status_category', 'server_error')
              end
            "
          }
        }
        
        # 响应时间分类
        if [http_request][duration] {
          ruby {
            code => "
              duration = event.get('[http_request][duration]').to_i
              if duration < 100
                event.set('response_performance_category', 'fast')
              elsif duration < 500
                event.set('response_performance_category', 'normal')
              elsif duration < 1000
                event.set('response_performance_category', 'slow')
              else
                event.set('response_performance_category', 'very_slow')
              end
            "
          }
        }
      }
      
      # 处理错误类型
      if [http_request][type] == "ERROR" {
        mutate {
          add_field => { 
            "event_type" => "http_error"
            "phase" => "error"
            "has_error" => "true"
            "request_id" => "%{[http_request][requestId]}"
            "error_message" => "%{[http_request][errorMessage]}"
          }
        }
      }
    }
  }
  
  # 解析时间戳
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
  }
  
  # 清理不需要的字段
  mutate {
    remove_field => [ 
      "host", 
      "agent", 
      "ecs",
      "@version",
      "input",
      "prospector"
    ]
  }
}

output {
  # SQL监控日志专用索引
  if [log_type] == "sql_execution" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "sql-execution-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # SQL汇总日志专用索引
  if [log_type] == "sql_summary" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "sql-summary-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # HTTP请求日志专用索引
  if [log_type] == "http_request" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "http-requests-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # 慢SQL单独索引（执行时间超过500ms）
  if [sql_performance_category] == "very_slow" or [sql_performance_category] == "extremely_slow" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "slow-sql-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # 慢请求单独索引（响应时间超过1000ms）
  if [response_performance_category] == "very_slow" or [request_performance_category] == "very_slow" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "slow-requests-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # 错误日志单独索引
  if [level] == "ERROR" or [event_type] == "http_error" or [sql_success] == "false" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "error-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # 根据环境输出到不同索引
  if [environment] == "dev" or [environment] == "development" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "dev-java-app-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
    
    # 开发环境输出到控制台
    stdout {
      codec => rubydebug {
        metadata => true
      }
    }
  } else if [environment] == "test" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "test-java-app-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  } else if [environment] == "prod" or [environment] == "production" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "prod-java-app-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  } else {
    # 默认输出
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "java-app-logs-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
  
  # 性能监控专用索引
  if [monitoring_type] == "sql" or [monitoring_type] == "sql_summary" {
    elasticsearch {
      hosts => ["${ELASTICSEARCH_HOSTS:192.168.1.46:9200}"]
      user => "${ELASTICSEARCH_USERNAME:}"
      password => "${ELASTICSEARCH_PASSWORD:}"
      index => "performance-monitoring-%{+YYYY.MM.dd}"
      document_type => "_doc"
    }
  }
}
